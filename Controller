
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="CONTROLLLLLLLERRRR!!!!!", group="Iterative Opmode")
//@Disabled
public class new_con extends OpMode
{
    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    DcMotor topL;
    DcMotor topR;
    DcMotor backL;
    DcMotor backR;
    DcMotor arm;
    DcMotor rotate;
    DcMotor arm2;
    Servo hand;

    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");


        topL = hardwareMap.dcMotor.get("topLeft");
        topR = hardwareMap.dcMotor.get("topRight");
        backL = hardwareMap.dcMotor.get("backLeft");
        backR = hardwareMap.dcMotor.get("backRight");
        arm = hardwareMap.dcMotor.get("arm");
        arm2 = hardwareMap.dcMotor.get("arm2");
        hand = hardwareMap.servo.get("hand");
        rotate = hardwareMap.dcMotor.get("rotate");
        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        runtime.reset();
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    //@Override

    public void loop() {
//        // Setup a variable for each drive wheel to save power level for telemetry
//        double leftPower;
//        double rightPower;
//        double werid;
//        // Choose to drive using either Tank Mode, or POV Mode
//        // Comment out the method that's not used.  The default below is POV.
//
//        // POV Mode uses left stick to go forward, and right stick to turn.
//        // - This uses basic math to combine motions and is easier to drive straight.
//        double drive = gamepad1.right_stick_y;
//        double turn  =  -gamepad1.left_stick_x;
//
//        leftPower    = Range.clip(drive + turn, -1.0, 1.0) ;
//        rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;
//        if(gamepad1.left_bumper)
//        {
//            topL.setPower(leftPower*.75);
//            topR.setPower(rightPower*.75);
//            backL.setPower(-leftPower*.75);
//            backR.setPower(-rightPower*.75);
//        }
//
//        else if(!gamepad1.right_bumper)
//        {
//            topL.setPower(leftPower*.75);
//            topR.setPower(-rightPower*.75);
//            backL.setPower(leftPower*.75);
//            backR.setPower(-rightPower*.75);
//        }
        double y = -gamepad1.left_stick_x; // Remember, this is reversed!
        double x = -gamepad1.right_stick_x * 1.1; // Counteract imperfect strafing
        double rx = gamepad1.right_stick_y;

        // Denominator is the largest motor power (absolute value) or 1
        // This ensures all the powers maintain the same ratio, but only when
        // at least one is out of the range [-1, 1]
        double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
        double frontLeftPower = (y + x + rx) / denominator;
        double backLeftPower = (y - x + rx) / denominator;
        double frontRightPower = (y - x - rx) / denominator;
        double backRightPower = (y + x - rx) / denominator;

        //topL.setPower(frontLeftPower*.75);
        //backL.setPower(backLeftPower*.75);
        //topR.setPower(frontRightPower*.75);
        //backR.setPower(backRightPower*.75);
        
        if(gamepad1.right_bumper)
        {
            topL.setPower(frontLeftPower);
            backL.setPower(backLeftPower);
            topR.setPower(frontRightPower);
            backR.setPower(backRightPower);
        }
        else if(!gamepad1.right_bumper)
        {
            topL.setPower(frontLeftPower*.75);
            backL.setPower(backLeftPower*.75);
            topR.setPower(frontRightPower*.75);
            backR.setPower(backRightPower*.75);
        }



        // Tank Mode uses one stick to control each wheel.
        // - This requires no math, but it is hard to drive forward slowly and keep straight.
//        leftPower  = -gamepad1.left_stick_y ;
//        rightPower = gamepad1.right_stick_y ;


        // Send calculated power to wheels


        //if(gamepad1.right_stick_x > .25)
        //{
        //  topL.setPower(-gamepad1.right_stick_x);
        //topR.setPower(gamepad1.right_stick_x);
        //backL.setPower(gamepad1.right_stick_x);
        //backR.setPower(-gamepad1.right_stick_x);
        //}
//        else if(gamepad1.right_stick_x < -.25)
//        {
//            topL.setPower(gamepad1.right_stick_x);
//            topR.setPower(-gamepad1.right_stick_x);
//            backL.setPower(-gamepad1.right_stick_x);
//            backR.setPower(gamepad1.right_stick_x);
//        }
//        else if(gamepad1.right_stick_x < .25&& gamepad1.right_stick_x >-.25)
//        {
//            topL.setPower(leftPower);
//            topR.setPower(rightPower);
//            backL.setPower(-leftPower);
//            backR.setPower(-rightPower);
//        }
        if(gamepad2.left_bumper)
        {
            hand.setPosition(1);
        }
        if(gamepad2.right_bumper)
        {
            hand.setPosition(0);
        }
        if(!gamepad2.left_bumper && !gamepad2.right_bumper)
        {
            hand.setPosition(.5);
        }
        if(gamepad2.right_trigger > 0.2)
        {
            arm.setPower(gamepad2.right_trigger / 3);
            arm2.setPower(-gamepad2.right_trigger / 3);
        }
        if(gamepad2.left_trigger > 0.2)
        {
            arm.setPower(gamepad2.left_trigger / -3);
            arm2.setPower(gamepad2.left_trigger / 3);
        }
        if(gamepad2.left_trigger < 0.2 && gamepad2.right_trigger < 0.2)
        {
            arm.setPower(0);
            arm2.setPower(0);
        }
        if(gamepad2.a)
        {
            rotate.setPower(1);
        }
        if(gamepad2.b)
        {
            rotate.setPower(0);
        }
        if(gamepad2.x)
        {
            rotate.setPower(-1);
        }



        // Show the elapsed game time and wheel power.
        telemetry.addData("Status", "Run Time: " + runtime.toString());
        telemetry.addData("Motors", "Front Left (%.2f), Front Right (%.2f)\n Back Left(%.2f), Back Right(%.2f)", frontLeftPower, frontRightPower, backLeftPower, backRightPower);
    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
    }

}

